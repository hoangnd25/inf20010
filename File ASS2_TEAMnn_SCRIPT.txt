--Write your teams details here:
-- Team No: 
-- Stu ID 1: 209522X          Surname: Nguyen           Firstname: Hoang
-- Stu ID 2: 1799215   Surname: Che              Firstname: Hung
-- Stu ID 3: 7240929     Surname:   Nguyen               Firstname: Tri Thuc

SET SERVEROUTPUT ON;

--Place all DROP object statements below this line (tables, sequences etc)

DROP SEQUENCE ErrorID_SEQ;
DROP SEQUENCE DWPRODSEQ;
DROP SEQUENCE DWCUSTSEQ;
DROP SEQUENCE DWSALESEQ;

DROP TABLE ERROR_EVENT;
DROP TABLE GENDERSPELLING;
DROP TABLE DWPROD;
DROP TABLE DWCUST;
DROP TABLE DWSALE;

/
--Place all CREATE SEQUENCE statements below this line (separate each statement with a line containing / )

Create Sequence ErrorID_SEQ;
CREATE SEQUENCE DWPRODSEQ;
CREATE SEQUENCE DWCUSTSEQ;
CREATE SEQUENCE DWSALESEQ;
/
--Place all CREATE TABLE statements below this line  (separate each statement with a line containing / )

/*CREATE ERROR EVENT TABLE*/
CREATE TABLE ERROR_EVENT (
ERRORID INTEGER,
SOURCE_ROWID ROWID,
SOURCE_TABLE VARCHAR2(30),
FILTER_ID INTEGER,
DATE_TIME DATE,
ACTION VARCHAR2(6),
CONSTRAINT A3_ERROR_EVENT_ACTION
CHECK (ACTION IN ('SKIP','MODIFY')) );

CREATE TABLE DWPROD (
	DWPRODID INTEGER, 
	DWSOURCETABLE VARCHAR2(20), 
	DWSOURCEID INTEGER, 
	PRODNAME VARCHAR2(60), 
	PRODCATNAME VARCHAR2(10), 
	PRODSHIPNAME VARCHAR2(30), 
	PRODMANUNAME VARCHAR2(60),
	SELLPRICE NUMBER
);

CREATE TABLE DWCUST (
	DWCUSTID INTEGER, 
	DWSOURCEIDBRIS VARCHAR2(20), 
	DWSOURCEIDMELB VARCHAR2(20),
	FIRSTNAME VARCHAR2(20), 
	SURNAME VARCHAR2(20), 
	GENDER VARCHAR2(7), 
	PHONE VARCHAR2(10),
	POSTCODE VARCHAR2(4),
	CITY VARCHAR2(30),
	STATE VARCHAR2(15),
	CUSTCATNAME VARCHAR2(40)	
);

CREATE TABLE DWSALE (
	DWSALEID INTEGER, 
	DWCUSTID INTEGER, 
	DWPRODID INTEGER, 
	DWSOURCEIDBRIS INTEGER, 
	DWSOURCEIDMELB INTEGER, 
	QTY INTEGER, 
	SALEDATE DATE, 
	SHIPDATE DATE, 
	SALEPRICE NUMBER
);

CREATE TABLE GENDERSPELLING (
	BADGENDER VARCHAR2(20) PRIMARY KEY,
	GOODGENDER VARCHAR(1)
);

INSERT INTO GENDERSPELLING VALUES('MAIL','M');
INSERT INTO GENDERSPELLING VALUES('WOMAN','F');
INSERT INTO GENDERSPELLING VALUES('FEM','F');
INSERT INTO GENDERSPELLING VALUES('FEMALE','F');
INSERT INTO GENDERSPELLING VALUES('MALE','M');
INSERT INTO GENDERSPELLING VALUES('GENTLEMAN','M');
INSERT INTO GENDERSPELLING VALUES('MM','M');
INSERT INTO GENDERSPELLING VALUES('FF','F');
INSERT INTO GENDERSPELLING VALUES('FEMAIL','F');

/
--Place the GENDERSPELLING statements statement below this line  


/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_PRODUCT code below this line (or leave blank if not attempted)

CREATE OR REPLACE PROCEDURE SP_CLEAN_PRODUCT AS
BEGIN

INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2PRODUCT',1,SYSDATE,'MODIFY' FROM VLI.A2PRODUCT
WHERE PRODUCTCATEGORY NOT IN (SELECT PRODUCTCATEGORY FROM VLI.A2PRODCATEGORY);

END;

/
--Place CREATE OR REPLACE SP_UPLOAD_PRODUCT code below this line (or leave blank if not attempted)

CREATE OR REPLACE PROCEDURE SP_UPLOAD_PRODUCT AS

BEGIN
INSERT INTO DWPROD (DWPRODID, DWSOURCETABLE, DWSOURCEID, PRODNAME, PRODCATNAME, PRODSHIPNAME, PRODMANUNAME, SELLPRICE)
SELECT DWPRODSEQ.NEXTVAL, 'A2PRODUCT', p.PRODID, p.PRODNAME, c.CATEGORYNAME, s.DESCRIPTION, m.MANUNAME, p.SELLPRICE FROM VLI.A2PRODUCT p 
NATURAL JOIN VLI.A2PRODCATEGORY c
NATURAL JOIN VLI.A2MANUFACTURER m
NATURAL JOIN VLI.A2SHIPPING s
WHERE p.ROWID NOT IN (SELECT SOURCE_ROWID FROM ERROR_EVENT e WHERE e.FILTER_ID = 1)
;

INSERT INTO DWPROD (DWPRODID, DWSOURCETABLE, DWSOURCEID, PRODNAME, PRODCATNAME, PRODSHIPNAME, PRODMANUNAME)
SELECT DWPRODSEQ.NEXTVAL, 'A2PRODUCT', p.PRODID, p.PRODNAME, 'UNKNOWN', s.DESCRIPTION, m.MANUNAME FROM VLI.A2PRODUCT p 
NATURAL JOIN VLI.A2PRODCATEGORY c
NATURAL JOIN VLI.A2MANUFACTURER m
NATURAL JOIN VLI.A2SHIPPING s
WHERE p.ROWID IN (SELECT SOURCE_ROWID FROM ERROR_EVENT e WHERE e.FILTER_ID = 1 AND e.ACTION = 'MODIFY')
;

END;

/
--Place code anonymous block to execute the above SPs below this line (or leave blank if not attempted)

BEGIN 
SP_CLEAN_PRODUCT;
SP_UPLOAD_PRODUCT;
END;

/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_CUST_BRIS code below this line (or leave blank if not attempted)

CREATE OR REPLACE PROCEDURE SP_CLEAN_CUST_BRIS AS 
BEGIN

INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS',2,SYSDATE,'MODIFY' FROM VLI.A2CUSTBRIS
WHERE VLI.A2CUSTBRIS.CUSTCAT NOT IN (SELECT VLI.A2CUSTCATEGORY.CUSTCATCODE FROM VLI.A2CUSTCATEGORY);

INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS',3,SYSDATE,'MODIFY' FROM VLI.A2CUSTBRIS
WHERE PHONE LIKE '% %' OR PHONE LIKE '%-%' OR REGEXP_LIKE(PHONE,'^[0-9]$');

INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS',3,SYSDATE,'SKIP' FROM VLI.A2CUSTBRIS
WHERE LENGTH(PHONE) != 10;

INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS',4,SYSDATE,'MODIFY' FROM VLI.A2CUSTBRIS
WHERE UPPER(GENDER) NOT IN ('M','F');

END;

/
--Place CREATE OR REPLACE SP_UPLOAD_CUST_BRIS code below this line (or leave blank if not attempted)

CREATE OR REPLACE PROCEDURE SP_UPLOAD_CUST_BRIS AS 
BEGIN

INSERT INTO DWCUST (DWCUSTID, DWSOURCEIDBRIS, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUSTSEQ.NEXTVAL, c.ID,NULL, c.FNAME, c.SNAME, c.GENDER, c.PHONE, c.POSTCODE, c.CITY, c.STATE, cat.CUSTCATNAME FROM VLI.A2CUSTBRIS c 
NATURAL JOIN VLI.A2CUSTCATEGORY cat
WHERE c.ROWID NOT IN (SELECT SOURCE_ROWID FROM ERROR_EVENT e WHERE e.FILTER_ID IN (2,3,4))
;

-- Filter 2
MERGE INTO DWCUST c
USING 
(
SELECT ROWID, ID, FNAME, SNAME, GENDER, PHONE, POSTCODE, CITY, STATE FROM VLI.A2CUSTBRIS 
WHERE ROWID IN (SELECT SOURCE_ROWID FROM ERROR_EVENT e WHERE e.FILTER_ID = 2 AND ACTION = 'MODIFY')
) s
ON (c.DWSOURCEIDBRIS =  s.ID)
WHEN MATCHED THEN UPDATE SET c.CUSTCATNAME = 'UNKNOWN'
WHEN NOT MATCHED THEN 
INSERT (c.DWCUSTID, c.DWSOURCEIDBRIS, c.DWSOURCEIDMELB, c.FIRSTNAME, c.SURNAME, c.POSTCODE, c.CITY, c.STATE, c.CUSTCATNAME)
VALUES (DWCUSTSEQ.NEXTVAL,s.ID,NULL, s.FNAME, s.SNAME, s.POSTCODE, s.CITY, s.STATE, 'UNKNOWN');

-- Filter 3
MERGE INTO DWCUST c
USING 
(
SELECT ROWID, ID, FNAME, SNAME, GENDER, PHONE, POSTCODE, CITY, STATE FROM VLI.A2CUSTBRIS 
WHERE ROWID IN (SELECT SOURCE_ROWID FROM ERROR_EVENT e WHERE e.FILTER_ID = 3 AND ACTION = 'MODIFY')
) s
ON (c.DWSOURCEIDBRIS =  s.ID)
WHEN MATCHED THEN UPDATE SET c.PHONE = REPLACE(REPLACE(s.PHONE, ' ', ''), '-', '')
WHEN NOT MATCHED THEN 
INSERT (c.DWCUSTID, c.DWSOURCEIDBRIS, c.DWSOURCEIDMELB, c.FIRSTNAME, c.SURNAME, c.PHONE, c.POSTCODE, c.CITY, c.STATE)
VALUES (DWCUSTSEQ.NEXTVAL,s.ID,NULL, s.FNAME, s.SNAME, REPLACE(REPLACE(s.PHONE, ' ', ''), '-', ''), s.POSTCODE, s.CITY, s.STATE);

-- Filter 4
MERGE INTO DWCUST c
USING 
(
SELECT ROWID, ID, FNAME, SNAME, GENDER, PHONE, POSTCODE, CITY, STATE FROM VLI.A2CUSTBRIS 
WHERE ROWID IN (SELECT SOURCE_ROWID FROM ERROR_EVENT e WHERE e.FILTER_ID = 4 AND ACTION = 'MODIFY')
) s
ON (c.DWSOURCEIDBRIS =  s.ID)
WHEN MATCHED THEN UPDATE SET c.GENDER = 
(
SELECT GOODGENDER FROM GENDERSPELLING WHERE BADGENDER = UPPER(s.GENDER) 
UNION ALL SELECT 'UNKNOWN' FROM DUAL 
WHERE NOT EXISTS (SELECT * FROM GENDERSPELLING WHERE BADGENDER = UPPER(s.GENDER))
)
WHEN NOT MATCHED THEN 
INSERT (c.DWCUSTID, c.DWSOURCEIDBRIS, c.DWSOURCEIDMELB, c.FIRSTNAME, c.SURNAME, c.POSTCODE, c.CITY, c.STATE, c.GENDER)
VALUES (DWCUSTSEQ.NEXTVAL,s.ID,NULL, s.FNAME, s.SNAME, s.POSTCODE, s.CITY, s.STATE,
(
SELECT GOODGENDER FROM GENDERSPELLING WHERE BADGENDER = UPPER(s.GENDER) 
UNION ALL SELECT 'UNKNOWN' FROM DUAL 
WHERE NOT EXISTS (SELECT * FROM GENDERSPELLING WHERE BADGENDER = UPPER(s.GENDER))
)
);

END;

/
--Place code that executes the above SPs below this line (or leave blank if not attempted)
BEGIN 
SP_CLEAN_CUST_BRIS;
SP_UPLOAD_CUST_BRIS;
END;

/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_SALES_BRIS code below this line (or leave blank if not attempted)

CREATE OR REPLACE PROCEDURE SP_CLEAN_SALES_BRIS AS
BEGIN
-- filter 5
INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2PRODUCT',5,SYSDATE,'SKIP' FROM VLI.A2SALEBRIS
WHERE PRODID NOT IN (SELECT DWSOURCEID FROM DWPROD);

-- filter 6
INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2SALEBRIS',6,SYSDATE,'SKIP' FROM VLI.A2SALEBRIS
WHERE CUSTID NOT IN (SELECT DWSOURCEIDBRIS FROM DWCUST);

-- filter 7
INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, ROWID, 'A2SALEBRIS',7,SYSDATE,'MODIFY' FROM VLI.A2SALEBRIS
WHERE (SHIPDATE + 1 ) < SALEDATE;

-- filter 8
INSERT INTO ERROR_EVENT (ERRORID,SOURCE_ROWID,SOURCE_TABLE,FILTER_ID,DATE_TIME,ACTION)
SELECT ErrorID_SEQ.NEXTVAL, s.ROWID, 'A2SALEBRIS',7,SYSDATE,'MODIFY' FROM VLI.A2SALEBRIS s
INNER JOIN DWPROD p
ON p.DWSOURCEID = s.PRODID
WHERE p.SELLPRICE = NULL;

END;


/
--Place CREATE OR REPLACE SP_UPLOAD_SALES_BRIS code below this line (or leave blank if not attempted)


/
--Place code that executes the above SPs below this line (or leave blank if not attempted)


/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_CUST_MELB code below this line (or leave blank if not attempted)


/
--Place CREATE OR REPLACE SP_UPLOAD_CUST_MELB code below this line (or leave blank if not attempted)


/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_SALES_MELB code below this line (or leave blank if not attempted)


/
--Place CREATE OR REPLACE SP_UPLOAD_SALES_MELB code below this line (or leave blank if not attempted)


/
--Place code that executes the above SPs below this line (or leave blank if not attempted)


/
--====================================================================================================
--QUERY 1
--Modify this query so that it matches the table names and column names used in your database
PROMPT ***** QUERY 1 Filter count *****
SELECT   FILTERNO, ACTION, COUNT(*)
FROM     ERROREVENT
GROUP BY FILTERNO, ACTION
ORDER BY 1,2;


--QUERY  2
--This query counts the number of rows in each of the DW% tables
PROMPT ***** QUERY 2 DW Row Count *****
SELECT TABLE_NAME,
   TO_NUMBER(EXTRACTVALUE(XMLTYPE(DBMS_XMLGEN.GETXML('SELECT COUNT(*) C FROM '
   || TABLE_NAME)),'/ROWSET/ROW/C')) ROW_COUNT
   FROM USER_TABLES
   WHERE TABLE_NAME IN (SELECT TABLE_NAME FROM USER_TABLES
WHERE TABLE_NAME  LIKE 'A2%')
ORDER BY 1;


--QUERY  3
--Place SQL Query that lists total sales for each weekday 
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 3 Weekday sales *****


--QUERY  4
--Place SQL Query that lists each customer category total sales 
--below this line (or leave blank if not attempted
PROMPT ***** QUERY 4 Customer Category Sales*****


--QUERY  5
--Place SQL Query that lists sales for each product manufacturer
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 5 Sales by Manufacturer*****


--QUERY  6
--Place SQL Query that lists top 10 customers 
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 6 Top 10 Customers *****


--QUERY  7
--Place SQL Query that lists bottom 10 products
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 7 Bottom 10 products *****


--QUERY  8
/--Place SQL Query that lists top City in each State
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 8 Top City in each State list *****



